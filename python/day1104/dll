class DLList:
    class Node:
        def  __init__(self, name, age, pre, next):
            self.name=name
            self.age=age
            self.pre=pre
            self.next=next

    def  __init__(self):
            #self.head=self.Node(None, None, None, None)
            self.head=None
            self.size = 0

    def size(self):
            return self.size()

    def isEmpty(self):
            return self.size == 0
    # def searchNode(self, pos):
    #         p=self.head
    #         if pos == "":
    #             return  None
    #         while p!=None:
    #             if p.name == pos:
    #                 return p
    #             p=p.next
    #
    # def printDLL(self):
    #         p = self.head
    #         print('head=', self.head)
    #         while True:
    #             if p.next != None:
    #                 print(p.name,p.age, p, p.pre, p.next,  "<=>", end='')
    #             else:
    #                 print(p.name,p,p.pre, p.next)
    #                 break
    #             p = p.next
    #
    # def insert(self, nm, age, pre, pos=""): #p다음에 삽입
    #         p=self.searchNode(pos)
    #         #최초삽입
    #         if self.head==None:
    #             #new=self.Node(nm, age, self.head, self.head) 둘다 같긴함 아래꺼랑
    #             new = self.Node(nm, age, None, None)
    #             self.head=new
    #             self.size+=1
    #         #첫 노드 삽입
    #         elif self.head!=None and p==None:
    #             new=self.Node(nm, age, None, self.head)
    #             self.head.pre=new
    #             self.head=new
    #             self.size += 1
    #         #주간노드 삽입
    #         elif p!=None:
    #             if p.next!=None:
    #
    #                 new = self.Node(nm, age, p, p.next)
    #                 p.next.pre=new
    #                 p.next=new
    #
    #             else:
    #
    #                 #마지막 노드 주소 찾기
    #                 new = self.Node(nm, age, p,None )
    #                 p.next = new
    #             self.size+=1
    #
    #     def del(self, pos):
    #         p=self.searchNode(pos)
    #
    #
